{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Qadence Hub Overview","text":"<p>Welcome to the documentation for the Qadence Hub. This repository contains multiple modular Python packages developed on top of Qadence features.</p>"},{"location":"#qadence-hub-structure","title":"Qadence Hub Structure","text":""},{"location":"#list-of-hub-packages","title":"List of Hub Packages","text":"<ul> <li>qadence-commons documentation: Shared quantum utilities library in Qadence</li> <li>qadence-mitigation documentation: Quantum error mitigation techniques</li> <li>qadence-measurement documentation: Quantum output measurement methods</li> <li>qadence-model documentation: Quantum constructors for various blocks and ans\u00e4tze.</li> </ul>"},{"location":"#package-source-code-links","title":"Package Source Code Links","text":"<ul> <li>qadence-commons source code</li> <li>qadence-mitigation source code</li> <li>qadence-measurement source code</li> <li>qadence-model source code</li> </ul>"},{"location":"#development-resources","title":"Development Resources","text":"<ul> <li>Setup Guide</li> <li>Testing</li> </ul>"},{"location":"#directory-conventions","title":"Directory Conventions","text":"<ul> <li>Use <code>project_name/</code> layout inside each module for source codes</li> <li>Tests should live in <code>tests/</code> inside each module</li> <li>Documentation should reside in the root <code>docs/</code> or module-specific docs</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"CODE OF CONDUCT","text":"<p>Code of Conduct</p>"},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"contributing/","title":"How to contribute","text":"<p>We're grateful for your interest in participating in qadence-hub. Please follow our guidelines to ensure a smooth contribution process.</p>"},{"location":"contributing/#contribution-guide-for-developers","title":"Contribution Guide for Developers","text":"<ul> <li>Submitting Issues: To submit bug reports or feature requests, please use our issue tracker.</li> </ul>"},{"location":"contributing/#reporting-an-issue-or-proposing-a-feature","title":"Reporting an issue or proposing a feature","text":"<p>Your course of action will depend on your objective, but generally, you should start by creating an issue. If you've discovered a bug or have a feature you'd like to see added to qadence-hub, feel free to create an issue on qadence-hubs's GitHub issue tracker. Here are some steps to take:</p> <ol> <li>Quickly search the existing issues using relevant keywords to ensure your issue hasn't been addressed already.</li> <li> <p>If your issue is not listed, create a new one. Try to be as detailed and clear as possible in your description.</p> </li> <li> <p>If you're merely suggesting an improvement or reporting a bug, that's already excellent! We thank you for it. Your issue will be listed and, hopefully, addressed at some point.</p> </li> </ol> <p>We have structured <code>qadence-hub</code> as a monorepo that includes several internal packages. The <code>qadence-hub</code> repository serves as the manager that oversees the source code, documentation, and distribution of all these packages. However, the <code>qadence-hub</code> itself is not packaged as a standalone module. Each package that is intended to be used alongside <code>qadence</code> is located within its own project folder under the hub repository.</p> <p>Therefore, to update an individual package rather than the Hub (root) level, please follow the steps below.</p>"},{"location":"contributing/#setup-with-downloading-the-whole-git-repository","title":"Setup with downloading the whole git repository","text":"<p>To work with <code>qadence-hub</code>, you should clone the entire GitHub repository and then access the individual projects. This approach is recommended for easier branch management, and cloning only a specific project is discouraged. After cloning the full repository, navigate to the desired project folder to run the Hatch environment or make code modifications. The example code snippet is like below:</p> <pre><code>git clone https://github.com/pasqal-io/qadence-hub.git\ncd qadence-model #(your package)\n</code></pre>"},{"location":"contributing/#making-pull-request","title":"Making Pull Request","text":"<p>If you\u2019ve modified the code of a specific package, you should create a pull request targeting the <code>sub-main branch</code> of that package. Our branch structure manages each package through its corresponding <code>sub-main branch</code> before anything is merged into the <code>main branch</code>. Therefore, after cloning the repository, you should follow your previous workflow to create a local branch and push it\u2014but your pull request target should be your <code>sub-main branch</code>, not <code>main</code>. We currently have four sub-main branches; <code>main-commons</code>, <code>main-mitigation</code>, <code>main-measurement</code>, and <code>main-model</code>.</p> <p>After your branch is merged to <code>sub-main branch</code>, you can initiate merge request to the <code>main branch</code>. Merging into <code>main branch</code> should be done only when a release is being prepared. In the <code>sub-main branches</code>, tests are run only for the corresponding package, but when merging into main, tests are executed for all packages within <code>qadence-hub</code>. Therefore, we recommend managing your package in its <code>sub-main branch</code> during regular development, and only pushing to main when necessary.</p>"},{"location":"contributing/#releasing-projects-and-publishing-to-pypi","title":"Releasing Projects and Publishing to PyPI","text":"<p>We publish each package separately. After you merge your <code>sub-main branch</code> to <code>main branch</code>, you can publish your documents and Python package through release. To do this, you need to update the version number in the package's <code>pyproject.toml</code>. Then, you create a release with the format of <code>package_name-v.x.y.z,</code> where x, y, and z are for version numbers. For example, if you want to publish <code>qadence-model</code> with version 1.2.5, you must put <code>model-v1.2.5</code> as your release name.</p>"},{"location":"contributing/#setting-up-your-development-environment","title":"Setting up your development environment","text":"<p>We recommended to use <code>hatch</code> for managing environments.</p> <p>To develop within qadence-hub packages, use: <pre><code>cd qadence-model # (your package)\npip install hatch\nhatch -v shell\n</code></pre></p>"},{"location":"contributing/#useful-thing-for-your-workflow-linting","title":"Useful thing for your workflow: linting","text":"<p>Use <code>pre-commit</code> to lint your code and run the unit tests before pushing a new commit.</p> <p>Using <code>hatch</code>, it's simply:</p> <pre><code>pre-commit install\nhatch -e tests run pre-commit run --all-files\n</code></pre> <p>Our CI/CD pipeline will also test if the documentation can be built correctly. To test it locally, please run:</p> <pre><code>hatch -e docs run mkdocs build --clean --strict\n</code></pre> <p>Without <code>hatch</code>, <code>pip</code> install those libraries first: \"mkdocs\", \"mkdocs-material\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-section-index\", \"mkdocs-jupyter\", \"mkdocs-exclude\", \"markdown-exec\"</p> <p>And then:</p> <pre><code> mkdocs build --clean --strict\n</code></pre>"},{"location":"hub/commons/","title":"Commons","text":"<p>Qadence Commons provides generic <code>Protocol</code> and <code>StrEnum</code> classes for Qadence Mitigation and Measurement packages.</p> <p>Qadence-Commons is a Python package that provides shared libraries for Qadence. Commons documentations is here</p>"},{"location":"hub/measurement/","title":"Measurement","text":"<p>Sample-based measurement protocols are fundamental tools for the prediction and estimation of a quantum state as the result of NISQ programs executions. Their resource efficient implementation is a current and active research field. Currently, quantum state tomography is implemented in qadence-measurement.</p> <p>Qadence-Measurement is a Python package that provides measurement post-processing for Qadence. Measurement documentations is here</p>"},{"location":"hub/mitigation/","title":"Mitigation","text":"<p>Errors may show up in various forms when trying to extract information from a quantum circuit. These include coherent and incoherent errors that effect gate execution, readout error during measurement and statistical errors.</p> <p>Qadence-Mitigation is a Python package that provides error mitigation features for Qadence. Mitigation documentations is here</p>"},{"location":"hub/model/","title":"Model","text":"<p>Qadence-Model offers a wide range of utilities for helping building and researching quantum machine learning algorithms.</p> <p>Qadence-Model is a Python package that provides quantum models for quantum machine learning features in Qadence. Model documentations is here</p>"},{"location":"hub/setup/","title":"Setup Guide","text":""},{"location":"hub/setup/#1-clone-qadence-hub","title":"1. Clone Qadence-Hub","text":"<pre><code>git clone https://github.com/pasqal-io/qadence-hub.git\ncd qadence-hub\n</code></pre>"},{"location":"hub/setup/#2-navigate-to-the-directory-for-the-project-you-want-to-work-on","title":"2. Navigate to the directory for the project you want to work on:","text":"<ul> <li> <p>For mitigations development: <pre><code>cd qadence-mitigation\n</code></pre></p> </li> <li> <p>For commons development: <pre><code>cd qadence-commons\n</code></pre></p> </li> </ul>"},{"location":"hub/setup/#3-enter-the-hatch-environment","title":"3. Enter the Hatch environment","text":"<p>We use Hatch to manage development environments and builds. To set up and enter the environment, run: <pre><code>hatch env create\nhatch shell\n</code></pre></p>"},{"location":"hub/test/","title":"Test Guide","text":""},{"location":"hub/test/#lint-type-check","title":"Lint &amp; Type Check","text":"<pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"hub/test/#build-documentation","title":"Build Documentation","text":"<pre><code>hatch run docs:build\n</code></pre> <p>This will build the root documentation site into the <code>site/</code> directory.</p>"},{"location":"hub/test/#run-tests","title":"Run Tests","text":"<p>Each module has its own test configuration. For example:</p> <pre><code>cd qadence-mitigation\nhatch run test\n</code></pre>"},{"location":"hub/tree/","title":"Qadence Hub Code Tree","text":"<p>This repository follows a modular monorepo layout.</p> <pre><code>qadence-hub/\n\u251c\u2500\u2500 qadence-commons/           # Shared utility libraries for Qadence\n\u251c\u2500\u2500 qadence-mitigation/        # Tools for error mitigation in quantum circuit execution\n\u251c\u2500\u2500 qadence-measurement/       # Interfaces for executing and analyzing quantum measurement\n\u251c\u2500\u2500 qadence-model/             # Quantum ML models built on variational quantum circuits\n\u251c\u2500\u2500 docs/                       # Root documentation site\n\u251c\u2500\u2500 pyproject.toml              # Project configuration (Hatch-based)\n\u2514\u2500\u2500 .github/workflows/          # CI/CD pipelines (tests, docs, lint)\n</code></pre> <p>Each module is independently versioned and published to PyPI.</p>"}]}